import Redis from 'ioredis'; import { saveScan } from './supabase.js';
const K={ PROBE_RESULT:(d,p)=>`probe:result:${d}:${p}`, LAST_RUN:(d)=>`probe:last:${d}` };
function baselineMetrics(){ return { metrics:[ { title:'AI Overview Score', value:'78%', level:'STRONG', delta:'+12% from last scan', tooltip:'AI visibility composite' }, { title:'Entity Coverage', value:'42/60', level:'MODERATE', delta:'18 entities need optimization', tooltip:'Entities across KG/GBP/schema' }, { title:'Citation Potential', value:'85%', level:'HIGH', delta:'+ Industry leading', tooltip:'Likelihood of being cited in AI answers' }, { title:'Structured Data', value:'6/15', level:'NEEDS WORK', delta:'9 schema types missing', tooltip:'Detected vs required schemas' } ] }; }
async function overlayProbes(dealer,payload){ if(!process.env.REDIS_URL) return { ...payload, probe_fresh:false, probe_age_minutes:null, probe_last_run_at:null }; const r=new Redis(process.env.REDIS_URL); try{ const names=['OpenAI','Anthropic','Perplexity']; const probes={}; for(const n of names){ const raw=await r.get(K.PROBE_RESULT(dealer,n)); if(raw) probes[n]=JSON.parse(raw); } const lastRun=await r.get(K.LAST_RUN(dealer)); const lastAt=lastRun?new Date(lastRun):null; const ageMin=lastAt?Math.round((Date.now()-lastAt.getTime())/60000):null; const maxAge=Number(process.env.PROBE_FRESH_MAX_AGE_MIN||360); const fresh=ageMin!==null?ageMin<=maxAge:false; return { ...payload, probes, probe_last_run_at:lastAt?lastAt.toISOString():null, probe_age_minutes:ageMin, probe_fresh:fresh }; } finally{ await r.quit().catch(()=>{}); } }
export async function runAnalyze({ dealer, dealerLabel }){ const base=baselineMetrics(); const composed=await overlayProbes(dealer,{ dealer, dealerLabel, at:new Date().toISOString(), ...base }); const save=await saveScan(dealer, composed).catch(e=>({ saved:false, error:e.message })); return { ok:true, ...save, payload: composed }; }
